/*
 * -------------------------------------------------
 *  TRON-Bioinformatics/tronflow-vcf-normalization Nextflow config file
 * -------------------------------------------------
 */

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  test {
    params.reference = "$baseDir/test_data/ucsc.hg19.minimal.fasta"
    timeline.enabled = false
    report.enabled = false
    trace.enabled = false
    dag.enabled = false
  }
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

VERSION = '1.0.0'

manifest {
  name = 'TRON-Bioinformatics/tronflow-vcf-normalization'
  author = 'Pablo Riesgo-Ferreiro'
  homePage = 'https://github.com/TRON-Bioinformatics/tronflow-vcf-normalization'
  description = 'vt variant normalization pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = VERSION
}

params.help_message = """
TronFlow VCF normalization v${VERSION}

Usage:
    nextflow run main.nf --input_files input_files --reference reference.fasta

This workflow implements a VT VCF normalization pipeline (vt v0.5772)

Input:
    * input_files: the path to a tab-separated values file containing in each row the sample name  and path to the VCF file
    The input file does not have header!
    Example input file:
    sample1	/path/to/your/file.vcf
    sample2	/path/to/your/file2.vcf

Optional input:
    * reference: path to the FASTA genome reference (indexes expected *.fai, *.dict) [default: hg19]
    * output: the folder where to publish output
    * skip_split_mnps: flag indicating not to split MNPs (overrides --decompose_non_blocked_substitutions)
    * decompose_non_blocked_substitutions: decomposes indels and SNVs blocked together despite being non deterministic
    * skip_duplication_removal: flag indicating to skip duplication removal
    * skip_split_vcf_by_type: flag indicating to skip splitting the VCF by variant type
    * filter: specify the filter to apply if any (e.g.: PASS), only variants with this value will be kept

Output:
    * Normalized VCF file
    * One normalized VCF file per variant type (SNPs, MNPs, indels, BND, other)
    * Tab-separated values file with the absolute paths to the preprocessed BAMs, preprocessed_bams.txt
    * Summary stats and plots on the VCF
    """
